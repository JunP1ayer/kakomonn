{"code":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function ProductsApp() {\n  const [items, setItems] = useState([]);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // データ取得\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\n  const fetchItems = async () => {\n    try {\n      const response = await fetch('/api/crud/products');\n      if (response.ok) {\n        const data = await response.json();\n        setItems(data);\n      }\n    } catch (error) {\n      console.error('データ取得エラー:', error);\n    }\n  };\n\n  // 新規作成\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!name.trim()) return;\n    \n    setLoading(true);\n    try {\n      const response = await fetch('/api/crud/products', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          name: name.trim(), \n          description: description.trim() \n        }),\n      });\n      \n      if (response.ok) {\n        setName('');\n        setDescription('');\n        fetchItems();\n      }\n    } catch (error) {\n      console.error('作成エラー:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 削除\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`/api/crud/products?id=${id}`, {\n        method: 'DELETE',\n      });\n      \n      if (response.ok) {\n        fetchItems();\n      }\n    } catch (error) {\n      console.error('削除エラー:', error);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <h1 className=\"text-3xl font-bold mb-8 text-center\">\n        商品管理システム（商品登録、在庫管理、注文管理） - 管理システム\n      </h1>\n      \n      {/* 新規作成フォーム */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle>新規作成</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">名前</label>\n              <Input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"名前を入力してください\"\n                required\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">説明</label>\n              <Input\n                type=\"text\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                placeholder=\"説明を入力してください（任意）\"\n              />\n            </div>\n            <Button type=\"submit\" disabled={loading || !name.trim()} className=\"w-full\">\n              {loading ? '作成中...' : '作成'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* データ一覧 */}\n      <Card>\n        <CardHeader>\n          <CardTitle>データ一覧 ({items.length}件)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {items.length === 0 ? (\n            <p className=\"text-center text-gray-500 py-8\">\n              まだデータがありません。上のフォームから作成してください。\n            </p>\n          ) : (\n            <div className=\"space-y-3\">\n              {items.map((item) => (\n                <div \n                  key={item.id} \n                  className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\"\n                >\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">{item.name}</h3>\n                    {item.description && (\n                      <p className=\"text-gray-600 text-sm\">{item.description}</p>\n                    )}\n                    <p className=\"text-xs text-gray-400\">\n                      作成日: {new Date(item.created_at).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <Button\n                    onClick={() => handleDelete(item.id)}\n                    variant=\"destructive\"\n                    size=\"sm\"\n                  >\n                    削除\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* API情報 */}\n      <div className=\"mt-8 p-4 bg-gray-100 rounded-lg\">\n        <h3 className=\"font-semibold mb-2\">使用可能なAPI:</h3>\n        <ul className=\"text-sm text-gray-600 space-y-1\">\n          <li>GET /api/crud/products - 全データ取得</li>\n          <li>POST /api/crud/products - 新規作成</li>\n          <li>DELETE /api/crud/products?id=xxx - 削除</li>\n        </ul>\n        <p className=\"text-xs text-gray-500 mt-2\">\n          テーブル名: products\n        </p>\n      </div>\n    </div>\n  );\n}","schema":{"tableName":"products","columns":[{"name":"id","type":"uuid","primaryKey":true},{"name":"name","type":"varchar","required":true},{"name":"description","type":"text"},{"name":"status","type":"varchar","default":"active"},{"name":"created_at","type":"timestamp","default":"now()"},{"name":"updated_at","type":"timestamp","default":"now()"}]},"tableName":"products","message":"アプリが正常に生成されました！ウェブアプリは準備完了です。","instructions":{"howToUse":"このコードをReactコンポーネントとしてコピーして使用してください","apiEndpoints":{"create":"/api/crud/products (POST)","read":"/api/crud/products (GET)","delete":"/api/crud/products?id=xxx (DELETE)"},"note":"このコードはそのまま使用可能で、完全なCRUD機能を提供します"}}