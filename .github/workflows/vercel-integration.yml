name: Vercel Integration Check

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  pre-deployment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        echo "🔧 Installing dependencies..."
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        
        # Clear any potential cache issues
        npm cache clean --force || true
        
        # Remove existing node_modules if any
        rm -rf node_modules package-lock.json || true
        
        # Fresh install
        npm install --verbose
        
        echo "📦 Verifying installation..."
        echo "node_modules contents:"
        ls -la node_modules/ | head -10
        
        echo "Checking .bin directory:"
        if [ -d "node_modules/.bin" ]; then
          echo "✅ .bin directory exists"
          ls -la node_modules/.bin/ | grep -E "(next|react)" || echo "Next.js/React binaries not found"
        else
          echo "❌ .bin directory missing"
          echo "Attempting to reinstall with different flags..."
          npm install --legacy-peer-deps --verbose
        fi
        
        echo "Final check for Next.js:"
        if [ -f "node_modules/.bin/next" ]; then
          echo "✅ Next.js binary found"
          node_modules/.bin/next --version
        else
          echo "⚠️ Using npx as fallback"
          which npx || echo "npx not available"
        fi
      
    - name: Build and test
      run: |
        echo "🔨 Building Next.js application..."
        
        # Try multiple approaches for building
        if [ -f "node_modules/.bin/next" ]; then
          echo "Using local Next.js binary..."
          node_modules/.bin/next build
        elif command -v npx > /dev/null; then
          echo "Using npx..."
          npx --yes next@15.1.7 build
        else
          echo "❌ No way to run Next.js found"
          exit 1
        fi
        
        echo "✅ Build completed successfully"
        
        echo "🧹 Running linter..."
        if [ -f "node_modules/.bin/next" ]; then
          node_modules/.bin/next lint --fix || echo "⚠️ Lint errors found but continuing..."
        elif command -v npx > /dev/null; then
          npx --yes next@15.1.7 lint --fix || echo "⚠️ Lint errors found but continuing..."
        else
          echo "⚠️ Skipping lint - no Next.js available"
        fi
        echo "✅ Linting completed"
        
    - name: Check for styled-jsx issues
      run: |
        echo "🔍 Checking for client component directives..."
        
        # Check if all files using styled-jsx have 'use client'
        files_with_styled_jsx=$(find src -name "*.tsx" -exec grep -l "styled jsx" {} \; 2>/dev/null || true)
        
        if [ -n "$files_with_styled_jsx" ]; then
          echo "Files using styled-jsx found:"
          echo "$files_with_styled_jsx"
          
          for file in $files_with_styled_jsx; do
            if ! grep -q "'use client'" "$file"; then
              echo "❌ $file uses styled-jsx but missing 'use client' directive"
              exit 1
            else
              echo "✅ $file has proper 'use client' directive"
            fi
          done
        else
          echo "✅ No styled-jsx usage detected or all files properly configured"
        fi

  post-deployment:
    runs-on: ubuntu-latest
    needs: pre-deployment
    
    steps:
    - name: Wait for Vercel deployment
      run: |
        echo "⏳ Waiting for Vercel deployment..."
        echo "Commit SHA: ${{ github.sha }}"
        echo "Timestamp: $(date)"
        
        # Wait for deployment with progress updates
        for i in {1..6}; do
          echo "⏳ Waiting... ${i}/6 (${i}0 seconds elapsed)"
          sleep 15
        done
        
        echo "✅ Wait completed. Starting verification..."
        
    - name: Comprehensive site check
      run: |
        echo "🌐 Checking deployment status..."
        
        base_url="https://kakomonn-com.vercel.app"
        
        check_page() {
          local url=$1
          local name=$2
          
          echo "Checking $name at $url"
          
          # Get both status code and response time
          response=$(curl -s -o /tmp/response.html -w "%{http_code}:%{time_total}" "$url")
          status_code=$(echo $response | cut -d: -f1)
          response_time=$(echo $response | cut -d: -f2)
          
          echo "Status: $status_code, Time: ${response_time}s"
          
          if [ $status_code -eq 200 ]; then
            echo "✅ $name: HTTP $status_code - OK (${response_time}s)"
            return 0
          else
            echo "❌ $name: HTTP $status_code - FAILED"
            echo "Response preview:"
            head -10 /tmp/response.html | grep -E "(error|Error|404|500)" || echo "No obvious error message found"
            return 1
          fi
        }
        
        # Check all pages
        failed=0
        
        check_page "$base_url" "Landing Page" || failed=1
        check_page "$base_url/threads" "Threads List" || failed=1  
        check_page "$base_url/threads/1" "Thread Detail" || failed=1
        check_page "$base_url/upload" "Upload Form" || failed=1
        
        if [ $failed -eq 0 ]; then
          echo ""
          echo "🎉 All deployment checks passed!"
          echo "🚀 Site is fully operational at: $base_url"
        else
          echo ""
          echo "💥 Deployment verification failed!"
          echo "Some pages are not responding correctly"
          exit 1
        fi
        
    - name: Performance check
      run: |
        echo "⚡ Basic performance check..."
        
        start_time=$(date +%s%N)
        curl -s https://kakomonn-com.vercel.app/ > /dev/null
        end_time=$(date +%s%N)
        
        duration=$(( (end_time - start_time) / 1000000 ))
        echo "🕒 Landing page load time: ${duration}ms"
        
        if [ $duration -lt 3000 ]; then
          echo "✅ Performance: Good (< 3s)"
        elif [ $duration -lt 5000 ]; then
          echo "⚠️ Performance: Acceptable (< 5s)"  
        else
          echo "❌ Performance: Slow (> 5s)"
        fi