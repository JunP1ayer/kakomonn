// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // 過去問hub specific fields
  universityId  String?
  facultyId     String?
  grade         Int?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  university    University? @relation(fields: [universityId], references: [id])
  faculty       Faculty?    @relation(fields: [facultyId], references: [id])
  examFiles     ExamFile[]
  threads       Thread[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model University {
  id        String    @id @default(cuid())
  name      String    @unique
  domain    String?   // メール認証用ドメイン
  createdAt DateTime  @default(now())
  
  faculties Faculty[]
  users     User[]
}

model Faculty {
  id           String   @id @default(cuid())
  name         String
  universityId String
  createdAt    DateTime @default(now())
  
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  courses    Course[]
  users      User[]
  
  @@unique([universityId, name])
}

model Course {
  id          String   @id @default(cuid())
  name        String
  professor   String?
  code        String?   // 授業コード
  facultyId   String
  createdAt   DateTime @default(now())
  
  faculty   Faculty    @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  examFiles ExamFile[]
  
  @@unique([facultyId, name, professor])
}

model ExamFile {
  id          String   @id @default(cuid())
  title       String
  description String?
  year        Int
  semester    String   // "spring", "fall", "summer"
  examType    String   // "midterm", "final", "quiz", "report"
  fileUrl     String
  fileName    String
  fileSize    Int
  courseId    String
  uploaderId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  uploader User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  threads  Thread[]
}

model Thread {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  type       String   @default("discussion") // "discussion", "question"
  examFileId String?  // nullable for general discussions
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  examFile ExamFile? @relation(fields: [examFileId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  threadId  String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}